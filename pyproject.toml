[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "PyZEAL"
version = "1.0.0"
authors = [
    {name = "Philipp Schuette", email = "pschuet2@mail.uni-paderborn.de"}
]
description = "Python successor to the ZEAL package calculating zeros of holomorphic functions."
readme = "README.rst"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
]
keywords = ["root-finding", "numerical-analysis", "holomorphic-functions"]
dependencies = [
    "numpy>=1.21",
    "cython",
    "matplotlib",
    "scipy>=1.9.1",
    "rich>=12.2.0",
    "typing-extensions",
]

[project.optional-dependencies]
docs = [
	"sphinx",
	"sphinx-material",
	"nbsphinx",
	"sphinxcontrib-bibtex",
	"sphinx-autodoc-typehints",
    "sphinx-copybutton",
]
dev = [
	"mypy",
	"mypy-extensions",
	"hypothesis",
	"pytest",
	"pytest-cov",
    "pytest-xdist",
	"black",
	"isort",
	"docstr-coverage",
	"pylama[toml]",
	"pylint",
	"check-jsonschema",
]
all = ["pyzeal[docs]", "pyzeal[dev]", ]

[project.urls]
homepage = "https://github.com/Spectral-Analysis-UPB/PyZEAL"
documentation = "https://github.com/Spectral-Analysis-UPB/PyZEAL"

[project.scripts]
pyzeal = "pyzeal.cli.__main__:PyZEALEntry.mainPyZEAL"

[tool.setuptools]
include-package-data = true
package-dir = {pyzeal = "pyzeal"}

[tool.black]
line-length = 79
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 79

[tool.pytest]
junit_family = "legacy"
filterwarnings = "ignore::DeprecationWarning"

[tool.pytest.ini_options]
addopts = "--import-mode=importlib --strict-markers -p no:logging -m 'not hypothesis and not locator'"
markers = [
    "slow: mark tests as slow",
    "locator: tests for the locator must be run separately"
]

[tool.coverage.run]
omit = ["pyzeal/tests/benchmarks/*.py"]

[tool.mypy]
python_version = "3.9"
explicit_package_bases = true
strict = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
show_error_codes = true
ignore_missing_imports = false
warn_unreachable = true
warn_redundant_casts = true
disable_error_code = ["type-abstract", "no-untyped-call", ]

[tool.pylama]
format = "pylint"
linters = "mccabe,pyflakes,pycodestyle"

[tool.pylama.linter.pycodestyle]
max-complexity = 11
ignore = "E203,W503"
count = true

[tool.pylama.linter.pydocstyle]
ignore = "D200,D203,D205,D212,D301,D400,D415"

[tool.pylint.main]
fail-under = 8.9
ignore = ["CVS"]
limit-inference-results = 100
persistent = true
py-version = "3.9"
suggestion-mode = true

[tool.pylint.basic]
argument-naming-style = "camelCase"
attr-naming-style = "camelCase"
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]
class-attribute-naming-style = "camelCase"
class-const-naming-style = "UPPER_CASE"
class-naming-style = "PascalCase"
const-naming-style = "UPPER_CASE"
docstring-min-length = -1
function-naming-style = "camelCase"
good-names = [
    "i", "j", "k", "n", "s", "x", "y", "z", "x0", "x1", "x2", "y0", "y1", "y2",
    "z0", "z1", "z2", "aZ", "bZ", "cZ", "dZ", "a", "a1", "a2", "b", "b1", "b2",
    "c", "c1", "c2", "d", "d0", "r", "t", "u", "v", "m", "ud", "md", "td", "f",
    "df", "p", "ex", "_"
]
good-names-rgxs = ["_.", "Time*", "t."]
inlinevar-naming-style = "any"
method-naming-style = "camelCase"
module-naming-style = "snake_case"
no-docstring-rgx = ["^_"]
property-classes = ["abc.abstractproperty"]
typealias-rgx = ["t."]
# typevar-rgx = ["T"]
variable-naming-style = "camelCase"

[tool.pylint.classes]
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]
valid-classmethod-first-arg = ["cls"]
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# exclude-too-few-public-methods = ["ToggleCollection"]
max-args = 8
max-attributes = 8
max-bool-expr = 5
max-branches = 12
max-locals = 18
max-parents = 7
max-public-methods = 12
max-returns = 6
max-statements = 50
min-public-methods = 1

[tool.pylint.exceptions]
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"
indent-after-paren = 4
indent-string = "    "
max-line-length = 79
max-module-lines = 800

[tool.pylint.imports]
known-third-party = ["enchant"]

[tool.pylint.logging]
logging-format-style = "old"
logging-modules = ["logging"]

[tool.pylint."messages control"]
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

disable = [
    "raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored",
    "suppressed-message", "useless-suppression", "deprecated-pragma",
    "use-symbolic-message-instead", "unnecessary-ellipsis", "global-statement",
    "wrong-import-order"
]

enable = ["c-extension-no-member"]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete", "requests.api.get", "requests.api.head",
    "requests.api.options", "requests.api.patch", "requests.api.post",
    "requests.api.put", "requests.api.request"
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
evaluation = "10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)"
score = true

[tool.pylint.similarities]
ignore-comments = true
ignore-docstrings = true
# ignore-imports =
# ignore-signatures =
min-similarity-lines = 10

[tool.pylint.spelling]
max-spelling-suggestions = 2
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

[tool.pylint.typecheck]
contextmanager-decorators = ["contextlib.contextmanager"]
generated-members = "Progress"
ignore-none = true
ignore-on-opaque-inference = true
ignored-checks-for-mixins = [
    "no-member", "not-async-context-manager", "not-context-manager",
    "attribute-defined-outside-init"
]
ignored-classes = ["optparse.Values", "thread._local", "_thread._local"]
missing-member-hint = true
missing-member-hint-distance = 1
missing-member-max-choices = 1
mixin-class-rgx = ".*[Mm]ixin"

[tool.pylint.variables]
allow-global-unused-variables = true
callbacks = ["cb_", "_cb"]
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"
ignored-argument-names = "_.*|^ignored_|^unused_"
redefining-builtins-modules = [
    "six.moves", "past.builtins", "future.builtins", "builtins", "io"
]
