{
    "newton_grid_timings.NewtonGridSuite.TimeNewtonGridRootfinder": {
        "code": "class NewtonGridSuite:\n    def TimeNewtonGridRootfinder(self) -> None:\n        r\"\"\"\n        Runs the normal version of the rootfinding algorithm for all\n        test cases\n        \"\"\"\n        for tCase in self.testSuite:\n            gridRF = NewtonGridRootFinder(tCase[0], tCase[1])\n            gridRF.calcRoots([-5, 5], [-5, 5], precision=(3, 3))",
        "min_run_count": 2,
        "name": "newton_grid_timings.NewtonGridSuite.TimeNewtonGridRootfinder",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cf56d5aa28ac8de970d86ffc791c1301d1dac046725c8c4dd816117eb41928cc",
        "warmup_time": -1
    },
    "newton_grid_timings.NewtonGridSuite.TimeNewtonGridRootfinderDerivativeFree": {
        "code": "class NewtonGridSuite:\n    def TimeNewtonGridRootfinderDerivativeFree(self) -> None:\n        r\"\"\"\n        Runs the derivative-free version of the algorithm\n        \"\"\"\n        for tCase in self.testSuite:\n            gridRF = NewtonGridRootFinder(tCase[0], tCase[1])\n            gridRF.calcRoots([-5, 5], [-5, 5], precision=(3, 3))",
        "min_run_count": 2,
        "name": "newton_grid_timings.NewtonGridSuite.TimeNewtonGridRootfinderDerivativeFree",
        "number": 0,
        "param_names": [],
        "params": [],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c6fad9228cc004fe92834c1603e341fcb853d3e691fcd2e2d277ff37e8bdb46c",
        "warmup_time": -1
    },
    "version": 2
}